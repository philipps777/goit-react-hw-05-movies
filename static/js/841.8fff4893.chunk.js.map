{"version":3,"file":"static/js/841.8fff4893.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,+CADM,uBACrBH,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDAQfG,EAAY,mCAAG,WAAMC,GAAN,yFACHR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,oBACOP,EADP,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZM,EAAY,mCAAG,WAAMD,GAAN,yFACHR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,4BACeP,EADf,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAKnBA,EAAKO,MALc,2CAAH,sDAOZC,EAAe,mCAAG,WAAMH,GAAN,yFACNR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,4BACeP,EADf,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,EAAKC,SALiB,2CAAH,qD,6EClCrB,IAAMQ,EAAkB,mCAClBC,EAAc,qC,0HC8E3B,UApEsB,WAAO,IAAD,MAClBL,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAa7C,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEKjB,EAAAA,EAAAA,IAAaC,GAFlB,OAEbiB,EAFa,OAGnBR,EAASQ,GAHU,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDAQpBH,GACD,GAAE,CAAChB,KAGF,iCACE,2BACE,UAAC,KAAD,CAAMoB,GAAIR,EAAV,qBACS,sCAGX,4BACE,gBACES,IAAG,UACDb,EAAMc,YACFlB,EAAAA,EAAkBI,EAAMc,YACxBjB,EAAAA,EAAc,SAAWG,EAAMe,gBAErCC,IAAI,SAEN,4BACE,wBAAKhB,EAAMe,kBACX,qCAAaE,KAAKC,MAAMlB,EAAMmB,kBAC9B,sCACA,uBAAInB,EAAMoB,YACV,oCACA,kCACGpB,EAAMqB,cADT,aACG,EAAcC,KAAI,SAAAC,GAAK,OACtB,wBAAoBA,EAAMC,MAAjBD,EAAME,GADO,aAM9B,4BACE,oDACA,2BACE,yBACE,UAAC,KAAD,CAASb,GAAG,OAAOP,MAAOH,EAASG,MAAnC,kBACM,sCAGR,yBACE,UAAC,KAAD,CAASO,GAAG,UAAUP,MAAOH,EAASG,MAAtC,qBACS,yCAIb,SAAC,EAAAqB,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,WAKT,C","sources":["api.js","images/ImagesNotFound.jsx","pages/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6aeaa8beaecf2aa788be79aa448ce67d';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.cast;\n};\nexport const getReviewsMovie = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data.results;\n};\n","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const PLACEHOLDER = 'https://via.placeholder.com/182x273';\n","import { Suspense, useEffect, useState } from 'react';\nimport {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { getMovieById } from 'api';\nimport { BASE_POSTER_URL, PLACEHOLDER } from '../../images/ImagesNotFound';\n\nconst MoviesDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState('');\n  const location = useLocation();\n\n  const backLinkHref = location.state?.from ?? '/movies';\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      try {\n        const movieById = await getMovieById(movieId);\n        setMovie(movieById);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n\n  return (\n    <>\n      <span>\n        <Link to={backLinkHref}>\n          Go back<span>.</span>\n        </Link>\n      </span>\n      <div>\n        <img\n          src={`${\n            movie.poster_path\n              ? BASE_POSTER_URL + movie.poster_path\n              : PLACEHOLDER + '?text=' + movie.original_title\n          }`}\n          alt=\"get\"\n        />\n        <div>\n          <h2>{movie.original_title}</h2>\n          <h3>Rating: {Math.round(movie.vote_average)}</h3>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {movie.genres?.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <NavLink to=\"cast\" state={location.state}>\n              Cast<span>.</span>\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\" state={location.state}>\n              Reviews<span>.</span>\n            </NavLink>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\nexport default MoviesDetails;\n"],"names":["axios","API_KEY","getTrendingMovies","data","results","getMovieByQuery","query","getMovieById","movieId","getCastMovie","cast","getReviewsMovie","BASE_POSTER_URL","PLACEHOLDER","useParams","useState","movie","setMovie","location","useLocation","backLinkHref","state","from","useEffect","fetchMovieById","movieById","console","log","to","src","poster_path","original_title","alt","Math","round","vote_average","overview","genres","map","genre","name","id","Suspense","fallback"],"sourceRoot":""}